"""Adding initial tables

Revision ID: 4c712d84d5c4
Revises:
Create Date: 2024-01-06 21:10:20.798818

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '4c712d84d5c4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('country',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_country_id'), 'country', ['id'], unique=False, schema='rcb')
    op.create_table('discipline',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('shortname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('DISABLED', 'TESTING', 'ENABLED', name='disciplinestatus'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_discipline_id'), 'discipline', ['id'], unique=False, schema='rcb')
    op.create_table('range_manufactor',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_range_manufactor_id'), 'range_manufactor', ['id'], unique=False, schema='rcb')
    op.create_table('competition',
    sa.Column('event', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('shortname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('startdate', sa.DateTime, nullable=False),
    sa.Column('enddate', sa.DateTime, nullable=True),
    sa.Column('status', sa.Enum('DISABLED', 'TESTING', 'ENABLED', name='competitionstatus'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('discipline_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['discipline_id'], ['rcb.discipline.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_competition_id'), 'competition', ['id'], unique=False, schema='rcb')
    op.create_table('discipline_series',
    sa.Column('series', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('SIGHT', 'MATCH', 'SHOOTOFF', name='seriestype'), nullable=False),
    sa.Column('time', sa.Integer(), nullable=False),
    sa.Column('number_of_shots', sa.Integer(), nullable=True),
    sa.Column('single_shots', sa.Boolean(), nullable=True),
    sa.Column('elimination', sa.Boolean(), nullable=True),
    sa.Column('shooters_to_eliminate', sa.Integer(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('discipline_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['discipline_id'], ['rcb.discipline.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_discipline_series_id'), 'discipline_series', ['id'], unique=False, schema='rcb')
    op.create_table('shooting_club',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('shortname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('country_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['rcb.country.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_shooting_club_id'), 'shooting_club', ['id'], unique=False, schema='rcb')
    op.create_table('event',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('startdate', sa.DateTime, nullable=False),
    sa.Column('enddate', sa.DateTime, nullable=True),
    sa.Column('status', sa.Enum('CANCELLED', 'FINISHED', 'PLANNED', 'STARTED', name='eventstatus'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('shooting_club_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['shooting_club_id'], ['rcb.shooting_club.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_event_id'), 'event', ['id'], unique=False, schema='rcb')
    op.create_table('shooting_range',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lanes', sa.Integer(), nullable=False),
    sa.Column('first_lane', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('shooting_club_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('range_manufactor_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['range_manufactor_id'], ['rcb.range_manufactor.id'], ),
    sa.ForeignKeyConstraint(['shooting_club_id'], ['rcb.shooting_club.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rcb'
    )
    op.create_index(op.f('ix_rcb_shooting_range_id'), 'shooting_range', ['id'], unique=False, schema='rcb')
    op.create_table('event_range_link',
    sa.Column('event_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('shooting_range_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['rcb.event.id'], ),
    sa.ForeignKeyConstraint(['shooting_range_id'], ['rcb.shooting_range.id'], ),
    sa.PrimaryKeyConstraint('event_id', 'shooting_range_id'),
    schema='rcb'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('event_range_link', schema='rcb')
    op.drop_index(op.f('ix_rcb_shooting_range_id'), table_name='shooting_range', schema='rcb')
    op.drop_table('shooting_range', schema='rcb')
    op.drop_index(op.f('ix_rcb_event_id'), table_name='event', schema='rcb')
    op.drop_table('event', schema='rcb')
    op.drop_index(op.f('ix_rcb_shooting_club_id'), table_name='shooting_club', schema='rcb')
    op.drop_table('shooting_club', schema='rcb')
    op.drop_index(op.f('ix_rcb_discipline_series_id'), table_name='discipline_series', schema='rcb')
    op.drop_table('discipline_series', schema='rcb')
    op.drop_index(op.f('ix_rcb_competition_id'), table_name='competition', schema='rcb')
    op.drop_table('competition', schema='rcb')
    op.drop_index(op.f('ix_rcb_range_manufactor_id'), table_name='range_manufactor', schema='rcb')
    op.drop_table('range_manufactor', schema='rcb')
    op.drop_index(op.f('ix_rcb_discipline_id'), table_name='discipline', schema='rcb')
    op.drop_table('discipline', schema='rcb')
    op.drop_index(op.f('ix_rcb_country_id'), table_name='country', schema='rcb')
    op.drop_table('country', schema='rcb')
    # ### end Alembic commands ###